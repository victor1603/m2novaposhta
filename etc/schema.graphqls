directive @doc(description: String="") on QUERY
    | MUTATION
    | FIELD
    | FRAGMENT_DEFINITION
    | FRAGMENT_SPREAD
    | INLINE_FRAGMENT
    | SCHEMA
    | SCALAR
    | OBJECT
    | FIELD_DEFINITION
    | ARGUMENT_DEFINITION
    | INTERFACE
    | UNION
    | ENUM
    | ENUM_VALUE
    | INPUT_OBJECT
    | INPUT_FIELD_DEFINITION
directive @resolver(class: String) on FIELD_DEFINITION
directive @cache(cacheable: Boolean) on FIELD_DEFINITION

type Query {
    novaPoshtaCity(search: String): [NpCities]
    @resolver(class: "\\CodeCustom\\NovaPoshta\\Model\\Resolver\\City")

    novaPoshtaSettlement(search: String, only_warehause: Int): [NpCities]
    @resolver(class: "\\CodeCustom\\NovaPoshta\\Model\\Resolver\\Settlement")

    novaPoshtaWarehouse(settlement_ref: String!, search: String): [NpWareHouses]
    @resolver(class: "\\CodeCustom\\NovaPoshta\\Model\\Resolver\\Warehouse")

    novaPoshtaStreets(settlement_ref: String!, search: String!): [NpStreets]
    @resolver(class: "\\CodeCustom\\NovaPoshta\\Model\\Resolver\\Streets")

    customcustomeraddresses(page: Int): CustomCustomerAddresses
    @resolver(class: "\\CodeCustom\\NovaPoshta\\Model\\Resolver\\CustomerAddress")
}

type Mutation {
    customcustomeraddress (input: CustomCustomerAddressInput!): CustomCustomerAddress
    @resolver(class: "\\CodeCustom\\NovaPoshta\\Model\\Resolver\\CreateCustomerAddress")
    @doc(description: "Create custom customer address")

    removecustomeraddress (address_id: Int!): Boolean
    @resolver(class: "\\CodeCustom\\NovaPoshta\\Model\\Resolver\\RemoveCustomerAddress")
    @doc(description: "Remove address from DB")
}

type SelectedShippingMethod {
    shipping_method_extend: SelectedShippingMethodExtend @resolver(class: "\\CodeCustom\\NovaPoshta\\Model\\Resolver\\ShippingAddress\\SelectedShippingMethod")
}

type SelectedShippingMethodExtend {
    city_view: CityView
    warehouse_view: WareHouseView
    street_view: StreetView
    customer_address: [CustomCustomerAddress]
}

type CityView {
    input_view: Boolean
    input_type: String
    input_data: [NpCities]
}

type WareHouseView {
    input_view: Boolean
    input_data: [NpWareHouses]
}

type StreetView {
    input_view: Boolean
    input_data: [GglStreets]
}

type NpCities {
    ref: String
    name: String
}

type NpWareHouses {
    ref: String
    name: String
}

type NpStreets {
    ref: String
    name: String
}

type GglStreets {
    name: String
}

input PlaceOrderInput {
    shipping_additional: ShippingAdditional
}

input ShippingAdditional {
    city_ref: String
    city_title: String
    address_ref: String
    address_title: String
    firstname_ad: String
    lastname_ad: String
    email_ad: String
    comment_ad: String
    phone_ad: String
    phone_customer_ad: String
}

type AvailableShippingMethod {
    enable_field: Boolean
    shipping_desc: String
}

input CustomCustomerAddressInput {
    address_id: Int
    city: String!
    city_ref: String!
    street: String!
    house: String!
    apartment: String
    warehouse: String!
    warehouse_ref: String!
}

type CustomCustomerAddresses {
    addresses: [CustomCustomerAddress] @doc(description: "Customer addresses")
    total_count: Int
    page_info: PageInfo
}

type PageInfo {
    page_size: Int
    current_page: Int
    total_pages: Int
}

type CustomCustomerAddress {
    address_id: Int
    city: String
    city_ref: String
    street: String
    house: String
    apartment: String
    warehouse: String
    warehouse_ref: String
    select_title: String
}
